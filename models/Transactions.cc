/**
 *
 *  Transactions.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Transactions.h"
#include "User.h"
#include "Usergroup.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::test;

const std::string Transactions::Cols::_id = "id";
const std::string Transactions::Cols::_txuuid = "txuuid";
const std::string Transactions::Cols::_time = "time";
const std::string Transactions::Cols::_useruuid = "useruuid";
const std::string Transactions::Cols::_guuid = "guuid";
const std::string Transactions::Cols::_count = "count";
const std::string Transactions::primaryKeyName = "id";
const bool Transactions::hasPrimaryKey = true;
const std::string Transactions::tableName = "transactions";

const std::vector<typename Transactions::MetaData> Transactions::metaData_={
{"id","int32_t","int(11)",4,1,1,1},
{"txuuid","std::string","varchar(100)",100,0,0,1},
{"time","::trantor::Date","datetime",0,0,0,1},
{"useruuid","std::string","varchar(100)",100,0,0,1},
{"guuid","std::string","varchar(100)",100,0,0,1},
{"count","int32_t","int(11)",4,0,0,1}
};
const std::string &Transactions::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Transactions::Transactions(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["txuuid"].isNull())
        {
            txuuid_=std::make_shared<std::string>(r["txuuid"].as<std::string>());
        }
        if(!r["time"].isNull())
        {
            auto timeStr = r["time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                time_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["useruuid"].isNull())
        {
            useruuid_=std::make_shared<std::string>(r["useruuid"].as<std::string>());
        }
        if(!r["guuid"].isNull())
        {
            guuid_=std::make_shared<std::string>(r["guuid"].as<std::string>());
        }
        if(!r["count"].isNull())
        {
            count_=std::make_shared<int32_t>(r["count"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            txuuid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                time_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            useruuid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            guuid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            count_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Transactions::Transactions(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            txuuid_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                time_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            useruuid_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            guuid_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            count_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
}

Transactions::Transactions(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("txuuid"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["txuuid"].isNull())
        {
            txuuid_=std::make_shared<std::string>(pJson["txuuid"].asString());
        }
    }
    if(pJson.isMember("time"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["time"].isNull())
        {
            auto timeStr = pJson["time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                time_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("useruuid"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["useruuid"].isNull())
        {
            useruuid_=std::make_shared<std::string>(pJson["useruuid"].asString());
        }
    }
    if(pJson.isMember("guuid"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["guuid"].isNull())
        {
            guuid_=std::make_shared<std::string>(pJson["guuid"].asString());
        }
    }
    if(pJson.isMember("count"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["count"].isNull())
        {
            count_=std::make_shared<int32_t>((int32_t)pJson["count"].asInt64());
        }
    }
}

void Transactions::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            txuuid_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                time_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            useruuid_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            guuid_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            count_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
}

void Transactions::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("txuuid"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["txuuid"].isNull())
        {
            txuuid_=std::make_shared<std::string>(pJson["txuuid"].asString());
        }
    }
    if(pJson.isMember("time"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["time"].isNull())
        {
            auto timeStr = pJson["time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                time_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("useruuid"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["useruuid"].isNull())
        {
            useruuid_=std::make_shared<std::string>(pJson["useruuid"].asString());
        }
    }
    if(pJson.isMember("guuid"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["guuid"].isNull())
        {
            guuid_=std::make_shared<std::string>(pJson["guuid"].asString());
        }
    }
    if(pJson.isMember("count"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["count"].isNull())
        {
            count_=std::make_shared<int32_t>((int32_t)pJson["count"].asInt64());
        }
    }
}

const int32_t &Transactions::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Transactions::getId() const noexcept
{
    return id_;
}
void Transactions::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Transactions::PrimaryKeyType & Transactions::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Transactions::getValueOfTxuuid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(txuuid_)
        return *txuuid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Transactions::getTxuuid() const noexcept
{
    return txuuid_;
}
void Transactions::setTxuuid(const std::string &pTxuuid) noexcept
{
    txuuid_ = std::make_shared<std::string>(pTxuuid);
    dirtyFlag_[1] = true;
}
void Transactions::setTxuuid(std::string &&pTxuuid) noexcept
{
    txuuid_ = std::make_shared<std::string>(std::move(pTxuuid));
    dirtyFlag_[1] = true;
}

const ::trantor::Date &Transactions::getValueOfTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(time_)
        return *time_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Transactions::getTime() const noexcept
{
    return time_;
}
void Transactions::setTime(const ::trantor::Date &pTime) noexcept
{
    time_ = std::make_shared<::trantor::Date>(pTime);
    dirtyFlag_[2] = true;
}

const std::string &Transactions::getValueOfUseruuid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(useruuid_)
        return *useruuid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Transactions::getUseruuid() const noexcept
{
    return useruuid_;
}
void Transactions::setUseruuid(const std::string &pUseruuid) noexcept
{
    useruuid_ = std::make_shared<std::string>(pUseruuid);
    dirtyFlag_[3] = true;
}
void Transactions::setUseruuid(std::string &&pUseruuid) noexcept
{
    useruuid_ = std::make_shared<std::string>(std::move(pUseruuid));
    dirtyFlag_[3] = true;
}

const std::string &Transactions::getValueOfGuuid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(guuid_)
        return *guuid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Transactions::getGuuid() const noexcept
{
    return guuid_;
}
void Transactions::setGuuid(const std::string &pGuuid) noexcept
{
    guuid_ = std::make_shared<std::string>(pGuuid);
    dirtyFlag_[4] = true;
}
void Transactions::setGuuid(std::string &&pGuuid) noexcept
{
    guuid_ = std::make_shared<std::string>(std::move(pGuuid));
    dirtyFlag_[4] = true;
}

const int32_t &Transactions::getValueOfCount() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(count_)
        return *count_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Transactions::getCount() const noexcept
{
    return count_;
}
void Transactions::setCount(const int32_t &pCount) noexcept
{
    count_ = std::make_shared<int32_t>(pCount);
    dirtyFlag_[5] = true;
}

void Transactions::updateId(const uint64_t id)
{
    id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &Transactions::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "txuuid",
        "time",
        "useruuid",
        "guuid",
        "count"
    };
    return inCols;
}

void Transactions::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTxuuid())
        {
            binder << getValueOfTxuuid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTime())
        {
            binder << getValueOfTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getUseruuid())
        {
            binder << getValueOfUseruuid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getGuuid())
        {
            binder << getValueOfGuuid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCount())
        {
            binder << getValueOfCount();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Transactions::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void Transactions::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTxuuid())
        {
            binder << getValueOfTxuuid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTime())
        {
            binder << getValueOfTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getUseruuid())
        {
            binder << getValueOfUseruuid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getGuuid())
        {
            binder << getValueOfGuuid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCount())
        {
            binder << getValueOfCount();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Transactions::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getTxuuid())
    {
        ret["txuuid"]=getValueOfTxuuid();
    }
    else
    {
        ret["txuuid"]=Json::Value();
    }
    if(getTime())
    {
        ret["time"]=getTime()->toDbStringLocal();
    }
    else
    {
        ret["time"]=Json::Value();
    }
    if(getUseruuid())
    {
        ret["useruuid"]=getValueOfUseruuid();
    }
    else
    {
        ret["useruuid"]=Json::Value();
    }
    if(getGuuid())
    {
        ret["guuid"]=getValueOfGuuid();
    }
    else
    {
        ret["guuid"]=Json::Value();
    }
    if(getCount())
    {
        ret["count"]=getValueOfCount();
    }
    else
    {
        ret["count"]=Json::Value();
    }
    return ret;
}

Json::Value Transactions::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTxuuid())
            {
                ret[pMasqueradingVector[1]]=getValueOfTxuuid();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getTime())
            {
                ret[pMasqueradingVector[2]]=getTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getUseruuid())
            {
                ret[pMasqueradingVector[3]]=getValueOfUseruuid();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getGuuid())
            {
                ret[pMasqueradingVector[4]]=getValueOfGuuid();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getCount())
            {
                ret[pMasqueradingVector[5]]=getValueOfCount();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getTxuuid())
    {
        ret["txuuid"]=getValueOfTxuuid();
    }
    else
    {
        ret["txuuid"]=Json::Value();
    }
    if(getTime())
    {
        ret["time"]=getTime()->toDbStringLocal();
    }
    else
    {
        ret["time"]=Json::Value();
    }
    if(getUseruuid())
    {
        ret["useruuid"]=getValueOfUseruuid();
    }
    else
    {
        ret["useruuid"]=Json::Value();
    }
    if(getGuuid())
    {
        ret["guuid"]=getValueOfGuuid();
    }
    else
    {
        ret["guuid"]=Json::Value();
    }
    if(getCount())
    {
        ret["count"]=getValueOfCount();
    }
    else
    {
        ret["count"]=Json::Value();
    }
    return ret;
}

bool Transactions::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("txuuid"))
    {
        if(!validJsonOfField(1, "txuuid", pJson["txuuid"], err, true))
            return false;
    }
    else
    {
        err="The txuuid column cannot be null";
        return false;
    }
    if(pJson.isMember("time"))
    {
        if(!validJsonOfField(2, "time", pJson["time"], err, true))
            return false;
    }
    else
    {
        err="The time column cannot be null";
        return false;
    }
    if(pJson.isMember("useruuid"))
    {
        if(!validJsonOfField(3, "useruuid", pJson["useruuid"], err, true))
            return false;
    }
    else
    {
        err="The useruuid column cannot be null";
        return false;
    }
    if(pJson.isMember("guuid"))
    {
        if(!validJsonOfField(4, "guuid", pJson["guuid"], err, true))
            return false;
    }
    else
    {
        err="The guuid column cannot be null";
        return false;
    }
    if(pJson.isMember("count"))
    {
        if(!validJsonOfField(5, "count", pJson["count"], err, true))
            return false;
    }
    else
    {
        err="The count column cannot be null";
        return false;
    }
    return true;
}
bool Transactions::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Transactions::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("txuuid"))
    {
        if(!validJsonOfField(1, "txuuid", pJson["txuuid"], err, false))
            return false;
    }
    if(pJson.isMember("time"))
    {
        if(!validJsonOfField(2, "time", pJson["time"], err, false))
            return false;
    }
    if(pJson.isMember("useruuid"))
    {
        if(!validJsonOfField(3, "useruuid", pJson["useruuid"], err, false))
            return false;
    }
    if(pJson.isMember("guuid"))
    {
        if(!validJsonOfField(4, "guuid", pJson["guuid"], err, false))
            return false;
    }
    if(pJson.isMember("count"))
    {
        if(!validJsonOfField(5, "count", pJson["count"], err, false))
            return false;
    }
    return true;
}
bool Transactions::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Transactions::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson,
                                    std::string &err,
                                    bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
User Transactions::getUser(const drogon::orm::DbClientPtr &clientPtr) const {
    std::shared_ptr<std::promise<User>> pro(new std::promise<User>);
    std::future<User> f = pro->get_future();
    getUser(clientPtr, [&pro] (User result) {
        try {
            pro->set_value(result);
        }
        catch (...) {
            pro->set_exception(std::current_exception());
        }
    }, [&pro] (const DrogonDbException &err) {
        pro->set_exception(std::make_exception_ptr(err));
    });
    return f.get();
}
void Transactions::getUser(const DbClientPtr &clientPtr,
                           const std::function<void(User)> &rcb,
                           const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from user where uuid = ?";
    *clientPtr << sql
               << *useruuid_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(User(r[0]));
                    }
               }
               >> ecb;
}
Usergroup Transactions::getUsergroup(const drogon::orm::DbClientPtr &clientPtr) const {
    std::shared_ptr<std::promise<Usergroup>> pro(new std::promise<Usergroup>);
    std::future<Usergroup> f = pro->get_future();
    getUsergroup(clientPtr, [&pro] (Usergroup result) {
        try {
            pro->set_value(result);
        }
        catch (...) {
            pro->set_exception(std::current_exception());
        }
    }, [&pro] (const DrogonDbException &err) {
        pro->set_exception(std::make_exception_ptr(err));
    });
    return f.get();
}
void Transactions::getUsergroup(const DbClientPtr &clientPtr,
                                const std::function<void(Usergroup)> &rcb,
                                const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from usergroup where uuid = ?";
    *clientPtr << sql
               << *guuid_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Usergroup(r[0]));
                    }
               }
               >> ecb;
}
